@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix tree: <https://w3id.org/tree#>.
@prefix rdfl: <https://w3id.org/rdf-lens/ontology#>.
@prefix js: <https://w3id.org/conn/js#>.
@prefix fno: <https://w3id.org/function/ontology#>.
@prefix fnom: <https://w3id.org/function/vocabulary/mapping#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix : <https://w3id.org/conn#>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix dc: <http://purl.org/dc/terms/>.
@prefix rdfc: <https://w3id.org/rdf-connect/ontology#>.

<> owl:imports <./bucketizer_configs.ttl>.
rdfc:Bucketize a owl:Class, rdfs:Class;
  rdfc:jsImplementationOf rdfc:Processor;
  rdfs:label "Bucketizer processor";
  rdfs:description "This bucketizer processor is a SDS processor. It takes in SDS records and SDS metadata and bucketizes the incoming records according to some bucketize strategy. The metadata is also transformed to reflect this transformation. Many SDS streams can be present on the incoming data channel, please specify what stream to ingest and what stream to produce.";
  rdfc:file <../lib/bucketizers.js>;
  rdfc:class "Bucketizer";
  rdfc:entrypoint <../>.

[ ] a sh:NodeShape;
  sh:targetClass <Channels>;
  sh:property [
    sh:class rdfc:Reader;
    sh:path js:dataInput;
    sh:name "dataInput";
    sh:minCount 1;
    sh:maxCount 1;
  ], [
    sh:class rdfc:Reader;
    sh:path js:metadataInput;
    sh:name "metadataInput";
    sh:minCount 1;
    sh:maxCount 1;
  ], [
    sh:class rdfc:Writer;
    sh:path js:dataOutput;
    sh:name "dataOutput";
    sh:minCount 1;
    sh:maxCount 1;
  ], [
    sh:class rdfc:Writer;
    sh:path js:metadataOutput;
    sh:name "metadataOutput";
    sh:minCount 1;
    sh:maxCount 1;
  ].

[ ] a sh:NodeShape;
  sh:targetClass <RdfThing>;
  sh:property [
    sh:name "id";
    sh:path ( );
    sh:maxCount 1;
    sh:minCount 1;
    sh:datatype xsd:any;
  ], [
    sh:name "quads";
    sh:path ( );
    sh:maxCount 1;
    sh:minCount 1;
    sh:class rdfl:CBD;
  ].

[ ] a sh:NodeShape;
  sh:targetClass <Config>;
  sh:property [
    sh:class tree:FragmentationStrategy;
    sh:path ( );
    sh:name "strategy";
    sh:minCount 1;
  ], [
    sh:class <RdfThing>;
    sh:path ( );
    sh:name "quads";
    sh:minCount 1;
    sh:maxCount 1;
  ].

[ ] a sh:NodeShape;
  sh:targetClass rdfc:Bucketize;
  sh:property [
    sh:class <Channels>;
    sh:path js:channels;
    sh:name "channels";
    sh:minCount 1;
    sh:maxCount 1;
  ], [
    sh:class <Config>;
    sh:path js:bucketizeStrategy;
    sh:name "config";
    sh:minCount 1;
    sh:maxCount 1;
  ], [
    sh:datatype xsd:iri;
    sh:path js:inputStreamId;
    sh:name "sourceStream";
    sh:maxCount 1;
  ], [
    sh:datatype xsd:iri;
    sh:path js:outputStreamId;
    sh:name "resultingStream";
    sh:minCount 1;
    sh:maxCount 1;
  ], [
    sh:datatype xsd:string;
    sh:path js:savePath;
    sh:name "savePath";
    sh:maxCount 1;
  ], [
    sh:datatype xsd:string;
    sh:path js:prefix;
    sh:name "prefix";
    sh:maxCount 1;
  ].

